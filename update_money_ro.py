import asyncio

from aiogram import Bot, types
from aiogram.utils.exceptions import MessageNotModified, MessageToEditNotFound
import main_config
from models import base, db, MoneyNotifies, Money, User


async def check_notifies():
    errors = '–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏:\n'
    is_errors = False
    await base.on_startup()
    bot = Bot(main_config.API_TOKEN, parse_mode=types.ParseMode.HTML)
    notifies = await db.select([Money.amount, Money.percent, Money.trans, Money.uid_worker, MoneyNotifies.message_id, Money.payed,
                                MoneyNotifies.channel_id, MoneyNotifies.edited, MoneyNotifies.id]) \
        .select_from(MoneyNotifies.join(Money, onclause=MoneyNotifies.money_id == Money.id)) \
        .where(MoneyNotifies.edited == False).where(Money.country == 'ro').gino.all()
    for n in notifies:
        print(n.uid_worker)
        try:
            if n.payed:
                amount = round(n.amount * (n.percent / 100), 0)
                worker = await User.query.where(User.uid == n.uid_worker).gino.first()
                try:
                    if worker.anon:
                        user_text = 'üåöID: {}'.format(worker.hidden_id)
                    else:
                        user_text = 'üë©üèº‚Äçüíª–†–∞–±–æ—Ç–Ω–∏–∫: @{}'.format(
                            worker.username)
                    text = 'üá∑üá¥ –†—É–º—ã–Ω–∏—è\n' \
                           '‚úÖ–°—É–º–º–∞: {} RUB / {} LEI‚úÖ \n' \
                           'üíµ–°—Ç–∞—Ç—É—Å: [–û–ø–ª–∞—á–µ–Ω–æ]üíµ\n' \
                           'üìä–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: {}%\n' \
                           '{}'.format(get_rub(n.amount), n.amount, round(n.percent, 0),
                                                        user_text)
                    await bot.edit_message_text(text, n.channel_id, n.message_id)
                except (MessageNotModified, MessageToEditNotFound) as e:
                    print(e)
                await asyncio.sleep(.45)
                try:
                    await bot.send_message(worker.uid, '‚úÖ–°—É–º–º–∞: {}‚úÖ \nüíµ –°—Ç–∞—Ç—É—Å: [–û–ø–ª–∞—á–µ–Ω–æ]üíµ\n'
                                                       '<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –∫—É—Ä—Å LEI –∫ —Ä—É–±–ª—é —è–≤–ª—è–µ—Ç—Å—è —É—Å–ª–æ–≤–Ω—ã–º '
                                                       '–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã–º, —Å—É–≥—É–±–æ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. '
                                                       '–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É.\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:\n{}'.format(amount, n.trans))
                    pass
                except Exception as e:
                    print(e)
                await asyncio.sleep(.45)
                new_payouts = worker.payouts + 1
                await worker.update(payouts=new_payouts).apply()
                is_chat_member = False
                try:
                    member = await bot.get_chat_member(main_config.PL_LVL2_CHAT, worker.uid)
                    if member.status != types.ChatMemberStatus.LEFT:
                        is_chat_member = True
                except Exception:
                    pass
                if not is_chat_member:
                    money = await Money.query.where(Money.uid_worker == worker.uid).where(Money.country == 'ro').gino.all()
                    total_sum = 0
                    for m in money:
                        total_sum += m.amount
                    if total_sum >= 5000:
                        await bot.send_message(worker.uid,
                                               'üéâ–£—Ä–∞! –¢—ã –≤–Ω–µ—Å –±–æ–ª–µ–µ 5000 EURü§ë\n'
                                               'üò±–¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –¥–æ—Å—Ç—É–ø –≤ PRO-—á–∞—Ç\n'
                                               '–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ—Ç–ø–∏—à–∏ —Å—é–¥–∞ üëâüèª @onegin_02')
                        await bot.send_message(main_config.ERROR_CHANNEL, 'LT\n–ù–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –≤ –ø—Ä–æ —á–∞—Ç: @{}\n'
                                                                     '–ó–∞–Ω–µ—Å: {} EUR'.format(worker.username, total_sum))
                    else:
                        await bot.send_message(main_config.ERROR_CHANNEL, 'LT \n–í–æ—Ä–∫–µ—Ä: @{}\n'
                                                                     '–í—Å–µ–≥–æ –Ω–∞–≤–æ—Ä–∫–∞–ª: {} EUR\n'
                                                                     '–î–æ –ø—Ä–æ —á–∞—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {} EUR'
                                               .format(worker.username, total_sum, (250000 - total_sum)))
                await MoneyNotifies.update.values(edited=True).where(MoneyNotifies.id == n.id).gino.status()
        except Exception as e:
            is_errors = True
            errors += f"Notify id: {n.id}: {e}\n"
    if is_errors:
        await bot.send_message(000, errors)
    await bot.close()


def get_rub(EUR):
    return round(EUR * 18.22, 0)


if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(check_notifies())
