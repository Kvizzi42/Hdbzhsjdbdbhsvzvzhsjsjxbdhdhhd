import asyncio
import datetime

from aiogram import Bot, types

import main_config
from models import base, User


async def clean_users():
    text = 'üîí–í—ã –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è, –ø–æ—ç—Ç–æ–º—É –º—ã —É–¥–∞–ª–∏–ª–∏ –≤–∞—Å –∏–∑ –±–æ—Ç–∞ –∏ —á–∞—Ç–æ–≤.\n' \
           'üìù–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @onegin_01 –∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–∞—à–µ–≥–æ –ø—Ä–æ—Å—Ç–æ—è.'
    await base.on_startup()
    bot = Bot(main_config.API_TOKEN)
    chat_count = await bot.get_chat_members_count(main_config.LVL2_CHAT)
    users = await User.query.where(User.status == True).gino.all()
    count = 0
    counter = 0
    print('chat: {}'.format(chat_count))
    for u in users:
        print('Checked: {} PRO: {}'.format(counter, count))
        is_chat_member = False
        try:
            member = await bot.get_chat_member(main_config.LVL2_CHAT, u.uid)
            if member.status != types.ChatMemberStatus.LEFT:
                is_chat_member = True
        except Exception:
            pass
        if is_chat_member:
            await u.update(pro_access=True).apply()
            count += 1
        await asyncio.sleep(1)
        counter += 1
    await bot.send_message(1303591006, 'Chat count: {}\nChecked count: {}'.format(chat_count, count))
    await bot.close()

if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(clean_users())
